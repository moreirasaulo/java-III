/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day03peopleadvanced;



import static day03peopleadvanced.Person.dateFormat;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.text.ParseException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Acer
 */
public class Day03PeopleAdvanced extends javax.swing.JFrame {

    DefaultListModel<Person> modelPersonList = new DefaultListModel<>();
    /**
     * Creates new form Day03PeopleAdvanced
     */
    public Day03PeopleAdvanced() {
        initComponents();
        
        loadFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstPerson = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfHeight = new javax.swing.JTextField();
        sliderHeight = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        tfDateOfBirth = new javax.swing.JTextField();
        btAddPerson = new javax.swing.JButton();
        btDeletePerson = new javax.swing.JButton();
        btUpdatePerson = new javax.swing.JButton();
        btRemoveAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Person Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lstPerson.setModel(modelPersonList);
        lstPerson.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPerson.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPersonValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstPerson);

        jLabel1.setText("Name:");

        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Height(cm):");

        tfHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfHeightKeyReleased(evt);
            }
        });

        sliderHeight.setMajorTickSpacing(20);
        sliderHeight.setMaximum(220);
        sliderHeight.setMinimum(140);
        sliderHeight.setMinorTickSpacing(1);
        sliderHeight.setPaintLabels(true);
        sliderHeight.setPaintTicks(true);
        sliderHeight.setSnapToTicks(true);
        sliderHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderHeightStateChanged(evt);
            }
        });

        jLabel3.setText("Date of birth (yyyy-mm-dd):");

        btAddPerson.setText("Add Person");
        btAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddPersonActionPerformed(evt);
            }
        });

        btDeletePerson.setText("Delete Person");
        btDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeletePersonActionPerformed(evt);
            }
        });

        btUpdatePerson.setText("Update Person");
        btUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdatePersonActionPerformed(evt);
            }
        });

        btRemoveAll.setForeground(new java.awt.Color(255, 51, 51));
        btRemoveAll.setText("Remove All");
        btRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfName))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sliderHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btAddPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btUpdatePerson, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(btDeletePerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btRemoveAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAddPerson))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sliderHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(tfDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btUpdatePerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btDeletePerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRemoveAll)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddPersonActionPerformed
        // Name
        String fullName = tfName.getText();  
        if(!fullName.matches("^[a-zA-Z0-9-.\\/\\\\() ]{1,100}$"))
        {
            JOptionPane.showMessageDialog(this, "These characters are not accepted. Please re-enter the name.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        } 
        
        // Height
        int height = sliderHeight.getValue();
                
        // Date
        Date dateOfBirth = null;
        LocalDate currentDate = LocalDate.now();
        String date1 = currentDate + "";
        try
        {            
            dateOfBirth = Person.dateFormat.parse(tfDateOfBirth.getText());
            if(dateOfBirth.before(dateFormat.parse("1900-01-01")) || dateOfBirth.after(dateFormat.parse(date1))) // dateFormat.parse("2100/01/01")
            {
                JOptionPane.showMessageDialog(this, "This date is not valid. Year of birth must be from year 1900 to " + currentDate.getYear() + ".", "Invalid Date", 
                        JOptionPane.ERROR_MESSAGE);
            return;
            }
            
        } 
        catch (ParseException ex) 
        {
            JOptionPane.showMessageDialog(this, "This date is not valid. Please try again.", "Invalid Date", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Person person1 = new Person(fullName, height, dateOfBirth); 
        modelPersonList.addElement(person1);
        
    }//GEN-LAST:event_btAddPersonActionPerformed

    private void sliderHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderHeightStateChanged
        tfHeight.setText(sliderHeight.getValue()+"");
    }//GEN-LAST:event_sliderHeightStateChanged

    private void tfHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfHeightKeyReleased
        try
        {
            int height = Integer.parseInt(tfHeight.getText());            
            if(height < 140)
            {
                sliderHeight.setValue(140);
            }
            else if(height > 220)
            {
                sliderHeight.setValue(220);
            }        
            sliderHeight.setValue(height);
        }
        catch(NumberFormatException ex)
        {
            sliderHeight.setValue(170);
        }               
    }//GEN-LAST:event_tfHeightKeyReleased

    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNameActionPerformed

    private void btUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdatePersonActionPerformed
        if(modelPersonList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Your person list is empty", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(lstPerson.getSelectedIndex() == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select an item to update.", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Name
        String fullName = tfName.getText();
        if(!fullName.matches("^[a-zA-Z0-9-.\\/\\\\() ]{1,100}$"))
        {
            JOptionPane.showMessageDialog(this, "These characters are not accepted. Please re-enter the name.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Height
        int height = sliderHeight.getValue();
                
        // Date
        Date dateOfBirth = null;
        LocalDate currentDate = LocalDate.now();
        String date1 = currentDate + "";
        try
        {            
            dateOfBirth = Person.dateFormat.parse(tfDateOfBirth.getText());
            if(dateOfBirth.before(dateFormat.parse("1900-01-01")) || dateOfBirth.after(dateFormat.parse(date1))) // dateFormat.parse("2100/01/01")
            {
                JOptionPane.showMessageDialog(this, "This date is not valid. Year of birth must be from year 1900 to " + currentDate.getYear() + ".", "Invalid Date", 
                        JOptionPane.ERROR_MESSAGE);
            return;
            }
            
        } 
        catch (ParseException ex) 
        {
            JOptionPane.showMessageDialog(this, "This date is not valid. Please try again.", "Invalid Date", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Person person1 = new Person(fullName, height, dateOfBirth);
        
        modelPersonList.setElementAt(person1, lstPerson.getSelectedIndex());
    }//GEN-LAST:event_btUpdatePersonActionPerformed

    private void btDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeletePersonActionPerformed
        if(modelPersonList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Your person list is empty", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(lstPerson.getSelectedIndex() == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select an item to remove.", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        modelPersonList.removeElementAt(lstPerson.getSelectedIndex());
    }//GEN-LAST:event_btDeletePersonActionPerformed

    private void btRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveAllActionPerformed
        if(modelPersonList.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Your person list is empty", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        int answer = JOptionPane.showConfirmDialog(this, "This will remove all items from your list. Are you sure you would like to proceed?", "Warning",
                JOptionPane.YES_NO_OPTION);
        if(answer == JOptionPane.YES_OPTION)
        {
            modelPersonList.removeAllElements();
        }                
    }//GEN-LAST:event_btRemoveAllActionPerformed

    private void lstPersonValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPersonValueChanged
        
        if(lstPerson.getSelectedIndex() != -1)
        {           
            Person person1 = modelPersonList.getElementAt(lstPerson.getSelectedIndex());
            tfName.setText(person1.name);
            String height = person1.heightCm + ""; // Int to String
            tfHeight.setText(height);
            sliderHeight.setValue(person1.heightCm);
            tfDateOfBirth.setText(Person.dateFormat.format(person1.dateOfBirth));
            //System.out.println(modelPersonList.getElementAt(lstPerson.getSelectedIndex()));                        
        }              
        
    }//GEN-LAST:event_lstPersonValueChanged

    public void saveToFile()
    {
        if(modelPersonList.isEmpty())
        {
            dispose();
        }
        else
        {
            try(PrintWriter fileOutput = new PrintWriter(new FileWriter(new File("PersonManager.txt"), true)))
            {
                int i;
                for(i = 0; i < modelPersonList.size(); i++)
                {
                    Person person1 = modelPersonList.getElementAt(i);
                    String str = person1.name + ";" + person1.heightCm + ";" + Person.dateFormat.format(person1.dateOfBirth);
                    fileOutput.println(str);
                }               
            }
            catch(IOException ex)
            {
                        JOptionPane.showMessageDialog(this, "File Not Found", "Error",
                                JOptionPane.ERROR_MESSAGE);
                        
            }
        }                 
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveToFile();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day03PeopleAdvanced.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day03PeopleAdvanced().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddPerson;
    private javax.swing.JButton btDeletePerson;
    private javax.swing.JButton btRemoveAll;
    private javax.swing.JButton btUpdatePerson;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Person> lstPerson;
    private javax.swing.JSlider sliderHeight;
    private javax.swing.JTextField tfDateOfBirth;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables

    private void loadFromFile() {
        try(Scanner inputFile = new Scanner(new File("PersonManager.txt")))
        {                                  
            int i;
            while(inputFile.hasNextLine())
            {                
                String str = inputFile.nextLine();          
                String[] personList = str.split(";"); 
                try
                {
                    Person person1 = new Person(personList[0], Integer.parseInt(personList[1]), Person.dateFormat.parse(personList[2]));
                    modelPersonList.addElement(person1);
                }
                catch(NumberFormatException ex)
                {
                    JOptionPane.showMessageDialog(this, "Cannot load from file", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                catch(ParseException e)
                {
                    JOptionPane.showMessageDialog(this, "Cannot load from file", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } 
        catch(IOException ex)
        {
            JOptionPane.showMessageDialog(this, "File Not Found", "Error",
                    JOptionPane.ERROR_MESSAGE);
                        
        }   
    }
}
